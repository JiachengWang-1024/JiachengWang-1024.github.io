<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The beginning of the journey to the singularity</title>
    <url>/2025/03/19/The-beginning-of-the-journey-to-the-singularity/</url>
    <content><![CDATA[<p><strong><u>“What is love?”</u></strong></p>
<p><strong><u>“Baby,don’t hurt me.”</u></strong></p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <tags>
        <tag>think</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-hw01</title>
    <url>/2025/04/07/cs61a-hw01/</url>
    <content><![CDATA[<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, sub</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(-1, 4)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(-1, -4)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = sub</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = add</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b_syntax_check</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Check that you didn&#x27;t change the return statement of a_plus_abs_b.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # You aren&#x27;t expected to understand the code of this test.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, re</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; re.findall(r&#x27;^\s*(return .*)&#x27;, inspect.getsource(a_plus_abs_b), re.M)</span></span><br><span class="line"><span class="string">    [&#x27;return f(a, b)&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># You don&#x27;t need to edit this function. It&#x27;s just here to check your work.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">i, j, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return m*m + n*n, where m and n are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers i, j, and k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span>  i*i+j*j+k*k-<span class="built_in">max</span>(i*i,j*j,k*k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three_syntax_check</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Check that your two_of_three code consists of nothing but a return statement.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # You aren&#x27;t expected to understand the code of this test.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, ast</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [type(x).__name__ for x in ast.parse(inspect.getsource(two_of_three)).body[0].body]</span></span><br><span class="line"><span class="string">    [&#x27;Expr&#x27;, &#x27;Return&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># You don&#x27;t need to edit this function. It&#x27;s just here to check your work.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the hailstone sequence starting at n and return its</span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = hailstone(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    </span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> n ==<span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(n)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> i </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(n)</span><br><span class="line">                <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> :</span><br><span class="line">                    n = n // <span class="number">2</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    n = <span class="number">3</span>* n + <span class="number">1</span>   </span><br><span class="line">                    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Time&#39;s Arrow, Emitted Sparks</title>
    <url>/2025/03/22/Time&#39;s%20Arrow,%20Emitted%20Sparks/</url>
    <content><![CDATA[<p>Hello,everyone! Today, the topic of my presentation is how to save time. Well,first of all,let’s define what time is. In our daily life ,time is the swing of the clock on the wall. It leaves the history behind and takes us forward into the future ; time is the rise and set of the sun. In physics, time is the fourth dimension of our life. Maybe you have heard of ‘Minkowski Spacetime’ .   While his equations may seem daunting, their message is simple: <strong>every moment is a coordinate in the universe</strong>.<del>It’s so complex that we choose to put it aside, but if you are interesting about it ,you can try to learn this theory on the Internet.</del></p>
<p> Let’s focus on the importance of our time. According to the folk rumours , the total days of a human’s life are just about thirty thousand. Maybe it sounds so long ,but actually you should know ‘time flies’ There is about one third of your life when you are unaware and in active about the outside world. We all will have the end of life. I have learned a saying that time takes everything behind it and even itself. So the uppermost question is how to save our limited time . I read a lot of relevant book and tried to to figure out how to solve this big and hard question.  Such answers like taking good advantages of your fragment time when you are in a subway or bus ,zipping your time and improving your efficiency. I didn’t get the answer I expect. One day ,I was reminded of the text of our English lesson about Thanksgiving and then I came up with it . The answer is to reverse the word ‘time’,then it turns into ‘emit’. It means do something actively . Just like the sun emits bright sunshine. You should pursue the real things that you love and build a positive cycle for your own life . For instance ,<u><strong>if you love coding, start a 30-minutes daily project,if you want to keep a slim shape ,start to run in the playground everyday,if you want to get up early, go to bed early.</strong></u> Neglect other’s prejudice about your weird  behavior, keep moving and relentless. Then time will be conquered by you.</p>
<p>In the end , I’d like to quote one of my heroes ,  Benjamin Franklin, “<u><strong>Do you love life? Then do not squander time ,for time is the stuff life is made of</strong></u> .”  But I say: <strong>Don’t just love life — emit it.</strong> That’s all. Thanks for listening!</p>
]]></content>
      <tags>
        <tag>speech</tag>
      </tags>
  </entry>
  <entry>
    <title>R-notes</title>
    <url>/2025/03/20/notes/</url>
    <content><![CDATA[<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">x1&lt;-c(1,2,3,4)</span><br><span class="line">x2&lt;-c(2,3,4,5)</span><br><span class="line"></span><br><span class="line">mean(x1) </span><br><span class="line">#calculate the average of the number in x1</span><br><span class="line"></span><br><span class="line">&gt; mean(x1) </span><br><span class="line">&gt; [1] 2.5</span><br><span class="line"></span><br><span class="line">sd(x1) </span><br><span class="line">#calculate the covariance of the number in x1</span><br><span class="line"></span><br><span class="line">&gt; sd(x1)</span><br><span class="line">&gt; [1] 1.290994</span><br><span class="line"></span><br><span class="line">#category in R : integer ; double ; character ; logical ; complex ; raw</span><br><span class="line"></span><br><span class="line">x1_&lt;-length(x1)</span><br><span class="line">#return the length of the number in the vector of x1</span><br><span class="line"></span><br><span class="line">&gt; x1_</span><br><span class="line">&gt; [1] 4</span><br><span class="line">&gt; n&lt;-2.1e23</span><br><span class="line"></span><br><span class="line">rep(1:4,3)</span><br><span class="line">#repeat 1 2 3 4 for three times</span><br><span class="line">#for example :</span><br><span class="line"></span><br><span class="line">&gt; rep(1:4,3)</span><br><span class="line">&gt;  [1] 1 2 3 4 1 2 3 4 1 2 3 4</span><br><span class="line"></span><br><span class="line">z&lt;-c(1:40)</span><br><span class="line">cuts&lt;-cut(z,breaks=2)</span><br><span class="line">#wait </span><br><span class="line"></span><br><span class="line">&gt; cuts</span><br><span class="line">&gt;  [1] (0.961,20.5] (0.961,20.5] (0.961,20.5]</span><br><span class="line">&gt;  [4] (0.961,20.5] (0.961,20.5] (0.961,20.5]</span><br><span class="line">&gt;  [7] (0.961,20.5] (0.961,20.5] (0.961,20.5]</span><br><span class="line">&gt; [10] (0.961,20.5] (0.961,20.5] (0.961,20.5]</span><br><span class="line">&gt; [13] (0.961,20.5] (0.961,20.5] (0.961,20.5]</span><br><span class="line">&gt; [16] (0.961,20.5] (0.961,20.5] (0.961,20.5]</span><br><span class="line">&gt; [19] (0.961,20.5] (0.961,20.5] (20.5,40]   </span><br><span class="line">&gt; [22] (20.5,40]    (20.5,40]    (20.5,40]   </span><br><span class="line">&gt; [25] (20.5,40]    (20.5,40]    (20.5,40]   </span><br><span class="line">&gt; [28] (20.5,40]    (20.5,40]    (20.5,40]   </span><br><span class="line">&gt; [31] (20.5,40]    (20.5,40]    (20.5,40]   </span><br><span class="line">&gt; [34] (20.5,40]    (20.5,40]    (20.5,40]   </span><br><span class="line">&gt; [37] (20.5,40]    (20.5,40]    (20.5,40]   </span><br><span class="line">&gt; [40] (20.5,40]</span><br><span class="line">&gt; Levels: (0.961,20.5] (20.5,40]      </span><br><span class="line">&gt; #why</span><br><span class="line"></span><br><span class="line">vec&lt;-c(1,2,3,4,&quot;5&quot;)</span><br><span class="line">#Instead of reporting wrong,it changes the category of the elements ,int -&gt; char</span><br><span class="line"></span><br><span class="line">&gt; vec&lt;-c(1,2,3,4,&quot;5&quot;)</span><br><span class="line">&gt; vec</span><br><span class="line">&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot;</span><br><span class="line"></span><br><span class="line">labs&lt;-paste(c(&quot;X&quot;,&quot;Y&quot;),1:10,sep=&quot;^&quot;)</span><br><span class="line">labs[-2] </span><br><span class="line">#delete the second element in the vector of labs</span><br><span class="line">#for example :</span><br><span class="line"></span><br><span class="line">&gt; labs </span><br><span class="line">&gt; [1] &quot;X^1&quot;  &quot;Y^2&quot;  &quot;X^3&quot;  &quot;Y^4&quot;  &quot;X^5&quot; </span><br><span class="line">&gt; [6] &quot;Y^6&quot;  &quot;X^7&quot;  &quot;Y^8&quot;  &quot;X^9&quot;  &quot;Y^10&quot;</span><br><span class="line">&gt; labs[-2]</span><br><span class="line">&gt; [1] &quot;X^1&quot;  &quot;X^3&quot;  &quot;Y^4&quot;  &quot;X^5&quot;  &quot;Y^6&quot;  &quot;X^7&quot; </span><br><span class="line">&gt; [7] &quot;Y^8&quot;  &quot;X^9&quot;  &quot;Y^10&quot;</span><br><span class="line"></span><br><span class="line">a=c(&quot;green&quot;,&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;)</span><br><span class="line">a&lt;-factor(a) </span><br><span class="line">#treat the factor as a set ,it can&#x27;t be two same elements in the vector</span><br><span class="line">levels(a)</span><br><span class="line"></span><br><span class="line">&gt; levels(a)</span><br><span class="line">&gt; [1] &quot;blue&quot;  &quot;green&quot; &quot;red&quot;  </span><br><span class="line"></span><br><span class="line">dat&lt;-c(&quot;65&quot;,&quot;67&quot;,&quot;70&quot;)</span><br><span class="line">dat1&lt;-as.integer(dat) </span><br><span class="line">#change the elements&#x27;category ,from char to int</span><br><span class="line"></span><br><span class="line">&gt; dat1</span><br><span class="line">&gt; [1] 65 67 70  </span><br><span class="line">&gt; gps&lt;-c(&quot;F&quot;,&quot;F&quot;,&quot;M&quot;)    </span><br><span class="line">&gt; tapply(dat1,gps,mean)                     </span><br><span class="line">&gt; tapply(dat1,gps,mean) </span><br><span class="line">&gt;  F  M </span><br><span class="line">&gt; 66 70</span><br><span class="line"></span><br><span class="line">lst1&lt;-list(1:20,3,4)</span><br><span class="line"></span><br><span class="line">&gt; lst1</span><br><span class="line">&gt; [[1]]#the difference </span><br><span class="line">&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17</span><br><span class="line">&gt; [18] 18 19 20</span><br><span class="line"></span><br><span class="line">[[2]]</span><br><span class="line">[1] 3</span><br><span class="line"></span><br><span class="line">[[3]]</span><br><span class="line">[1] 4  </span><br><span class="line">                      </span><br><span class="line">lst2&lt;-list(a=1:20,b=3,c=4)   </span><br><span class="line"></span><br><span class="line">&gt; lst2</span><br><span class="line">&gt; $a#the difference </span><br><span class="line">&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17</span><br><span class="line">&gt; [18] 18 19 20</span><br><span class="line"></span><br><span class="line">$b</span><br><span class="line">[1] 3</span><br><span class="line"></span><br><span class="line">$c</span><br><span class="line">[1] 4                      </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>class-notes</tag>
      </tags>
  </entry>
</search>
